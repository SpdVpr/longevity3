// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  password           String?
  image              String?
  accounts           Account[]
  sessions           Session[]
  bioAgeResults      BioAgeResult[]
  workoutPlans       WorkoutPlan[]
  caloricNeedsResults CaloricNeedsResult[]
  profile            Profile?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio       String?
  birthdate DateTime?
  gender    String?
  height    Float?
  weight    Float?
  goals     String?  // Stored as JSON string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BioAgeResult {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chronologicalAge Int
  biologicalAge    Int
  ageDifference    Int
  riskLevel        String
  recommendations  String   // Stored as JSON string
  formData         String   // Stored as JSON string
  createdAt        DateTime @default(now())
}

model WorkoutPlan {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  calorieTarget    Int
  macroBreakdown   String   // Stored as JSON string
  workoutPlan      String   // Stored as JSON string
  mealPlan         String   // Stored as JSON string
  recommendations  String   // Stored as JSON string
  formData         String   // Stored as JSON string
  name             String?  // Optional name for the plan
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model CaloricNeedsResult {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bmr              Int
  tdee             Int
  targetCalories   Int
  macroBreakdown   String   // Stored as JSON string
  recommendations  String   // Stored as JSON string
  formData         String   // Stored as JSON string
  name             String?  // Optional name for the result
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
